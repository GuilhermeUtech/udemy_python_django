Como criar um projeto django? 
- django-admin startproject django1 . (Se eu não por o "." ele ia criar mais um diretório, como já tinhamos o projeto teriamos um 
diretório dentro do diretório)
 - manage.py é o arquivo que vamos utilizar para usar comandos do framework django

Como criar um app django?
 - django-admin startapp nome_projeto

Qual a diferença entre um projeto django e uma aplicação??? 
 - A gente cria um projeto, e dentro do projeto tem pedacinhos que são aplicações plugáveis.
 - Várias aplicações com suas tarefas específicas (que podem ser utilizadas em outro projeto)
 - Existem várias aplicações que podemos pegar da internet e utilizar 
 - A idéia é modularizar o projeto, ex: E-commerce, faríamos a aplicação de clientes, produtor, pagamentos, promoções etc
 - "Um projeto Django é um conjunto de aplicações..." Instrutor, Geek.

Padrão MTV do Django: 
 - Model, template, views.
 - No django o view funciona como um controller

Configurações do django e o arquivo settings.py
 - adicionar em 'DIRS' o valor 'templates' diz que teremos um diretório com esse nome na qual colocaremos nossos templates lá
 - Como startar o nosso projeto django: python manage.py runserver
 - Alerações em python são executadas diretamente, em css html js tem que reiniciar o server (obvio)

Views no Django e o arquivo views.py
 - Uma view em django é uma função que recebe um request e retorna uma renderização do request com um template.
 - Views são sempre criadas nas aplicações	

Rotas no Djando e o arquivo urls.py
 - Criamos as views, agora precisamos criar as rotas para as views.
 - Aplicações não tem urls.py 
 - cria as views, vai no url e importa as views e depois coloca no path (urlpatterns)
 - colocamos um urls dentro da aplicação para simplificar

Templates no Django
 - Lá em settings do projeto dizemos que nosso diretório de templates terá o nome de templates.
 - Cada aplicação terá seu próprio template. (Opcional, porém recomendável)

Models no Django e o arquivo models.py
 - O model é um modelo de dados, através das classes definidas o django mapeia essas classes em banco de dados.
 - Exemplo de modelo:
class Produto(models.Model):
    nome = models.CharField('Nome', max_lenght=100)
    prec = models.DecimalField('Preco')
    estoque = models.IntegerField('quantidade em estoque')

>python manage.py makemigrations -> comando para realizar migrations
O que que é o migration? Maneira de gerenciar o histórico de modificações do bd em relação aos modelos de dados.

 - Como executar a migration? python manage.py migrate
 - Assim que criamos um modelo a gente usa o comando make migration (sempre): python manage.py makemigrations
 - Por fim a gente utiliza o migrate: python manage.py migrate

Área administrativa dos projetos Djanfo e o arquivo admin.py
 - Como criar um usuário administrador: python manage.py createsuperuser

C:\Users\Guilherme Utech\Desktop\udemy_python_django\s3\criando_projeto_django>python manage.py createsuperuser
Usuário (leave blank to use 'guilhermeutech'):
Endereço de email: utech.br@gmail.com
Password:
Password (again):
Superuser created successfully.

 - admin.py nas aplicações serve para registrar os modelos criados, Ex:

	from .models import Produto, Cliente
	class ProdutoAdmin(admin.ModelAdmin):
    		list_display = ('nome', 'preco', 'estoque')

	admin.site.register(Produto, ProdutoAdmin)
	admin.site.register(Cliente) #essa ProdutoAdmin coloca certinho todos essas tabelas na aparição do produto na página de admin	

 - como alterar o caminho minhaurl.com/admin? vai em urls.py (do projeto) e altera: 
urlpatterns = [
    path('painel/', admin.site.urls), -> veja que troquei admin por painel
    path('', include('core.urls')),
]

Usando e abusando do Django Shell
 - python manage.py aparece todos os comandos
 - Para ter ajuda em um comando específico: python manage.py help makemigrations
 - python manage.py shell -> carrega um console python que da pra importar os models da aplicação e através
do comando dir(Nome_do_modelo) a gente consegue ver todos os atributos dele.
 - Tem uma grande quantidade de métodos que podemos utilizar para entre outras coisas, pegar informações dos usuários. Pode ver
se é super usuário, último login, nome, email, etc. .. . . .

Arquivos estáticos no Django: CSS,JavaScript e Imagens
 - Django usa um conceito de aplicações plugáveis, um projeto com suas aplicações.
 - Cada aplicação tem seu diretório de template, com as páginas que a aplicação vai apresentar.
settings.py tem a seguinte parte:

	# Static files (CSS, JavaScript, Images)
	# https://docs.djangoproject.com/en/3.0/howto/static-files/

	STATIC_URL = '/static/' # usado durante o desenvolvimento
Cada aplicação tem que ter um diretório com esse nome (static) e que os arquivos estáticos sejam pegos desse diretório.
 - Na aplicação, botão direito -> new directory -> static

-static
 -- css
 -- images
 -- js

Em cima de todo html que for carregar arquivos estáticos: {% load static %}
no head: <link rel="stylesheet" href="{% static 'css/estilos.css' %}"> vai lá no static do settings e dai pega os estáticos
<script type="text/javascript" src="{% static 'js/script.js' %}"></script> -> isso leva ao nosso static/js/script.js


Coloque nos seus favoritos o Django Docs:
 - Colocado, lá tem vários exemplos e tutoriais.



